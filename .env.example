# Flask Application Environment Configuration Template
# This file provides examples of all required environment variables for Flask deployment
# Copy this file to .env and update with your actual values
# DO NOT commit .env files with real credentials to version control

# =============================================================================
# FLASK APPLICATION CONFIGURATION
# =============================================================================

# Flask Environment Configuration (replaces NODE_ENV)
# Supported values: development, testing, staging, production
FLASK_ENV=development

# Flask Configuration Class Selection
# Maps to config classes in config.py for environment-specific settings
FLASK_CONFIG=development

# Flask Application Debug Mode
# Set to 'false' in production for security
FLASK_DEBUG=true

# Flask Application Version/Release
APP_VERSION=1.0.0

# Application Port (used by Gunicorn WSGI server)
PORT=8000

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Flask Session Security Key
# CRITICAL: Must be 32+ characters, randomly generated, unique per environment
# Generate with: python -c "import secrets; print(secrets.token_hex(32))"
SECRET_KEY=your-32-character-or-longer-secret-key-here

# JWT Token Security Configuration
# CRITICAL: Must be different from SECRET_KEY and 32+ characters
JWT_SECRET_KEY=your-jwt-secret-key-32-characters-or-longer

# Field-Level Encryption Key for SQLAlchemy-Utils EncryptedType
# Used for encrypting sensitive database fields (email, PII)
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
FIELD_ENCRYPTION_KEY=your-fernet-encryption-key-here

# Session Cookie Security Settings
SESSION_COOKIE_SECURE=false  # Set to 'true' in production with HTTPS
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=Lax

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Primary Database Connection URL
# Format: postgresql://username:password@hostname:5432/database_name?sslmode=require
# SSL mode options: disable, allow, prefer, require, verify-ca, verify-full
DATABASE_URL=postgresql://app_user:your_password@localhost:5432/flask_app_dev?sslmode=require&connect_timeout=10&statement_timeout=30000

# Alternative Database URL Format (for different environments)
# SQLALCHEMY_DATABASE_URI=${DATABASE_URL}

# Database Connection Pool Configuration
# Optimize based on expected concurrent users and server resources
SQLALCHEMY_POOL_SIZE=20
SQLALCHEMY_MAX_OVERFLOW=30
SQLALCHEMY_POOL_TIMEOUT=30
SQLALCHEMY_POOL_RECYCLE=3600
SQLALCHEMY_POOL_PRE_PING=true

# Database Performance Optimization
SQLALCHEMY_TRACK_MODIFICATIONS=false
SQLALCHEMY_ENGINE_ECHO=false
SQLALCHEMY_ENGINE_ECHO_POOL=false

# Read Replica Configuration (optional for scaling)
# SQLALCHEMY_BINDS_READ_REPLICA=postgresql://readonly_user:password@replica.example.com:5432/database_name?sslmode=require

# =============================================================================
# AUTH0 AUTHENTICATION CONFIGURATION
# =============================================================================

# Auth0 Domain (your Auth0 tenant domain)
# Example: your-tenant.us.auth0.com
AUTH0_DOMAIN=your-auth0-domain.auth0.com

# Auth0 Application Client ID
CLIENT_ID=your-auth0-client-id

# Auth0 Application Client Secret
# CRITICAL: Keep this secret and rotate regularly
CLIENT_SECRET=your-auth0-client-secret

# JWT Algorithm for Auth0 token verification
# RS256 is recommended for production
ALGORITHMS=RS256

# Auth0 API Audience (if using Auth0 APIs)
# AUTH0_AUDIENCE=your-api-audience

# Auth0 Management API Configuration (for user management)
# AUTH0_MANAGEMENT_API_TOKEN=your-management-api-token

# =============================================================================
# AWS CLOUD INFRASTRUCTURE CONFIGURATION
# =============================================================================

# AWS Region
AWS_REGION=us-east-1

# AWS Credentials (use IAM roles in production instead)
# AWS_ACCESS_KEY_ID=your-aws-access-key-id
# AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key

# AWS KMS Customer Managed Key ID for encryption
# AWS_KMS_CMK_ID=your-kms-customer-managed-key-id

# AWS S3 Configuration (for file storage, backups)
# AWS_S3_BUCKET=your-s3-bucket-name
# AWS_S3_REGION=us-east-1

# AWS Parameter Store Configuration
# Used for dynamic configuration management
PARAMETER_STORE_PREFIX=/flask-app

# AWS Secrets Manager Configuration
# Used for sensitive configuration like database passwords
# DATABASE_SECRET_NAME=flask-app/database/credentials
# AUTH0_SECRET_NAME=flask-app/auth0/client-secret

# =============================================================================
# LOGGING AND MONITORING CONFIGURATION
# =============================================================================

# Application Logging Level
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# AWS CloudWatch Logs Configuration
CLOUDWATCH_LOG_GROUP=flask-app-logs
CLOUDWATCH_STREAM_NAME=application

# Sentry Error Tracking Configuration
# SENTRY_DSN=your-sentry-dsn-url
# SENTRY_TRACES_SAMPLE_RATE=0.1
# SENTRY_PROFILES_SAMPLE_RATE=0.1

# Security Event Monitoring
SECURITY_EMAIL=security@yourcompany.com
# SLACK_WEBHOOK_URL=your-slack-webhook-url-for-alerts

# =============================================================================
# CACHING CONFIGURATION
# =============================================================================

# Redis Cache Configuration (optional)
# REDIS_URL=redis://localhost:6379/0
# CACHE_TYPE=redis
# CACHE_DEFAULT_TIMEOUT=300
# CACHE_KEY_PREFIX=flask_app_

# =============================================================================
# WSGI SERVER CONFIGURATION (GUNICORN)
# =============================================================================

# Gunicorn Worker Configuration
# Calculate workers: (CPU cores * 2) + 1, max 8 for most applications
GUNICORN_WORKERS=4
GUNICORN_WORKER_CLASS=sync
GUNICORN_WORKER_CONNECTIONS=1000
GUNICORN_TIMEOUT=30
GUNICORN_GRACEFUL_TIMEOUT=30
GUNICORN_KEEPALIVE=5
GUNICORN_MAX_REQUESTS=1000
GUNICORN_MAX_REQUESTS_JITTER=100
GUNICORN_LOG_LEVEL=info

# Gunicorn Security Configuration
GUNICORN_USER=flaskuser
GUNICORN_GROUP=flaskuser

# =============================================================================
# SSL/TLS CONFIGURATION (if terminating SSL at application level)
# =============================================================================

# SSL Certificate Configuration
# SSL_KEYFILE=/path/to/private.key
# SSL_CERTFILE=/path/to/certificate.crt
# SSL_CA_CERTS=/path/to/ca-bundle.crt

# =============================================================================
# DEVELOPMENT ENVIRONMENT SPECIFIC
# =============================================================================

# Development Database URL (SQLite for local development)
# DEV_DATABASE_URL=sqlite:///flask_app_dev.db

# Development Mail Configuration (for testing email functionality)
# MAIL_SERVER=localhost
# MAIL_PORT=587
# MAIL_USE_TLS=true
# MAIL_USERNAME=your-email@example.com
# MAIL_PASSWORD=your-email-password

# =============================================================================
# TESTING ENVIRONMENT SPECIFIC
# =============================================================================

# Test Database Configuration
# TEST_DATABASE_URL=postgresql://test_user:test_password@localhost:5432/flask_app_test

# Test Authentication Configuration
# TEST_SECRET_KEY=test-secret-key-for-testing-only
# TEST_JWT_SECRET=test-jwt-secret-for-testing-only
# TEST_AUTH0_DOMAIN=test-domain.auth0.com
# TEST_CLIENT_ID=test-client-id
# TEST_CLIENT_SECRET=test-client-secret

# =============================================================================
# PRODUCTION ENVIRONMENT SPECIFIC
# =============================================================================

# Production Security Enhancements
# FORCE_HTTPS=true
# SECURITY_HEADERS_ENABLED=true
# CSRF_PROTECTION_ENABLED=true

# Production Performance Configuration
# ENABLE_CACHING=true
# CACHE_BACKEND=redis
# CACHE_TIMEOUT=3600

# Production Monitoring
# HEALTH_CHECK_ENABLED=true
# METRICS_ENABLED=true
# PERFORMANCE_MONITORING=true

# =============================================================================
# THIRD-PARTY INTEGRATIONS
# =============================================================================

# Email Service Configuration (SendGrid, SES, etc.)
# EMAIL_SERVICE=sendgrid
# SENDGRID_API_KEY=your-sendgrid-api-key
# FROM_EMAIL=noreply@yourcompany.com

# Analytics and Tracking
# GOOGLE_ANALYTICS_ID=your-google-analytics-id
# MIXPANEL_TOKEN=your-mixpanel-token

# =============================================================================
# CONTAINER AND ORCHESTRATION CONFIGURATION
# =============================================================================

# Docker Container Configuration
CONTAINER_NAME=flask-app
CONTAINER_PORT=8000

# ECS/EKS Configuration
# CLUSTER_NAME=flask-app-cluster
# SERVICE_NAME=flask-app-service
# TASK_FAMILY=flask-app-task

# Health Check Configuration
HEALTH_CHECK_PATH=/health
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_TIMEOUT=5
HEALTH_CHECK_RETRIES=3

# =============================================================================
# FEATURE FLAGS AND TOGGLES
# =============================================================================

# Feature Toggle Configuration
# FEATURE_NEW_UI=false
# FEATURE_BETA_API=false
# FEATURE_ANALYTICS=true

# Migration Feature Flags
# ENABLE_LEGACY_SUPPORT=false
# ENABLE_NODE_JS_COMPATIBILITY=false

# =============================================================================
# BACKUP AND DISASTER RECOVERY
# =============================================================================

# Database Backup Configuration
# BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
# BACKUP_RETENTION_DAYS=30
# BACKUP_S3_BUCKET=your-backup-bucket

# Audit Log Configuration
# AUDIT_LOG_RETENTION_DAYS=2555  # 7 years
# AUDIT_LOG_ARCHIVE_DAYS=730     # 2 years in active storage

# =============================================================================
# NOTES AND BEST PRACTICES
# =============================================================================

# 1. NEVER commit actual .env files to version control
# 2. Use strong, unique values for all secret keys (32+ characters)
# 3. Rotate secrets regularly, especially in production
# 4. Use AWS Parameter Store or Secrets Manager for production secrets
# 5. Enable SSL/TLS in production environments
# 6. Monitor and log all authentication events
# 7. Test configuration changes in staging before production
# 8. Use environment-specific values for database connections
# 9. Enable connection pooling for optimal database performance
# 10. Configure appropriate worker counts based on server resources

# =============================================================================
# ENVIRONMENT VALIDATION
# =============================================================================

# Required Variables Checklist:
# ✓ FLASK_ENV
# ✓ SECRET_KEY (32+ characters)
# ✓ DATABASE_URL
# ✓ AUTH0_DOMAIN
# ✓ CLIENT_ID
# ✓ CLIENT_SECRET
# ✓ JWT_SECRET_KEY (32+ characters)

# Optional but Recommended:
# ✓ FIELD_ENCRYPTION_KEY (for PII protection)
# ✓ AWS_REGION (for cloud deployment)
# ✓ CLOUDWATCH_LOG_GROUP (for monitoring)
# ✓ SQLALCHEMY_POOL_SIZE (for performance)