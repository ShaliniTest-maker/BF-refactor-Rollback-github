# A generic, single database configuration for Flask-Migrate 4.1.0
# Database migration configuration for PostgreSQL 14.12+ with Flask-SQLAlchemy 3.1.1

[alembic]
# path to migration scripts directory
script_location = migrations

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# Database URL configuration - Flask-SQLAlchemy integration
# This will be dynamically set by Flask-Migrate from the SQLALCHEMY_DATABASE_URI
# environment variable or Flask app configuration
sqlalchemy.url = 

# Logging configuration section for migration operation tracking
# Per Section 6.2.4.1 audit implementation requirements

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

[loggers]
keys = root,sqlalchemy,alembic,flask_migrate

[handlers]
keys = console,file

[formatters]
keys = generic,detailed

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers = 
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers = console,file
qualname = alembic

[logger_flask_migrate]
level = INFO
handlers = console,file
qualname = flask_migrate

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_file]
class = FileHandler
args = ('migrations/migration.log', 'a')
level = INFO
formatter = detailed

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

[formatter_detailed]
format = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)d] %(funcName)s() - %(message)s
datefmt = %Y-%m-%d %H:%M:%S

# Flask-Migrate specific configuration
# These settings integrate with Flask-SQLAlchemy for seamless database migrations

[flask_migrate]
# Directory where migration versions are stored
directory = migrations

# Whether to autogenerate migrations
autogenerate = true

# Whether to use Flask-SQLAlchemy Model.metadata for autogeneration
use_flask_db = true

# Database comparison options for autogeneration
compare_type = true
compare_server_default = true

# Transaction mode for migrations - ensures atomic operations
transaction_per_migration = true

# PostgreSQL specific configuration for optimal performance
# Per Section 6.2.1 PostgreSQL database engine selection

[postgresql]
# Connection pool configuration via environment variables
# These settings coordinate with SQLAlchemy engine configuration
pool_size = 20
max_overflow = 30
pool_timeout = 30
pool_recycle = 3600
pool_pre_ping = true

# SSL configuration enforcement for production security
# Per Section 6.2.4.1 enhanced database connection security
sslmode = require

# Performance optimization settings
# Per Section 6.2.5 performance optimization requirements
statement_timeout = 30000
connect_timeout = 10

# Character encoding for PostgreSQL connections
client_encoding = utf8

# Migration operation configuration
# Per Section 4.4.1.5 production migration execution standards

[migration_operations]
# Batch processing configuration for large data migrations
# Per Section 6.2.5.3 batch processing requirements
batch_size = 1000

# Validation settings for migration integrity
# Per Section 4.4.1.4 migration script validation
validate_schema = true
validate_constraints = true
validate_indexes = true

# Rollback configuration for migration safety
# Per Section 4.4.2 migration management and rollback process
enable_rollback = true
backup_before_migration = true

# Performance monitoring for migration operations
# Per Section 6.2.5.1 query optimization and execution
monitor_performance = true
performance_threshold_ms = 200

# Audit trail configuration for compliance
# Per Section 6.2.4.1 data retention and privacy controls
audit_migrations = true
audit_log_level = INFO