# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = migrations

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version locations.  This defaults
# to migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses
# os.pathsep. If this key is omitted entirely, it falls back to the legacy
# behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# Flask-Migrate 4.1.0 PostgreSQL Database Configuration
# PostgreSQL 15.x database URI pattern with psycopg2 2.9.9 adapter
# Uses environment variable for secure connection string management
sqlalchemy.url = postgresql+psycopg2://user:password@localhost:5432/database_name

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Logging configuration for migration audit trails and rollback tracking
[loggers]
keys = root,sqlalchemy,alembic,flask_migrate

[handlers]
keys = console,file,audit

[formatters]
keys = generic,detailed,audit

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers = 
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers = console,file
qualname = alembic

[logger_flask_migrate]
level = INFO
handlers = console,file,audit
qualname = flask_migrate

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_file]
class = FileHandler
args = ('migrations/migration.log', 'a')
level = INFO
formatter = detailed

[handler_audit]
class = FileHandler
args = ('migrations/audit.log', 'a')
level = INFO
formatter = audit

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

[formatter_detailed]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S

[formatter_audit]
format = %(asctime)s [AUDIT] %(name)s - %(message)s - User: %(username)s - Operation: %(operation)s
datefmt = %Y-%m-%d %H:%M:%S

# Flask-Migrate 4.1.0 Click CLI Integration Configuration
# Supports flask db init, migrate, upgrade, downgrade operations
# Zero data loss migration requirements with comprehensive rollback capabilities

[migration_hooks]
# Pre-migration validation hooks
pre_migration_check = true
rollback_validation = true
data_integrity_check = true

# CI/CD pipeline integration settings
[cicd_integration]
# Automated migration testing in CI/CD pipeline
auto_test_migrations = true
staging_validation = true
rollback_test_required = true

# Performance impact assessment during migrations
performance_monitoring = true
query_timeout = 300

# Zero data loss migration configuration
[data_protection]
# Comprehensive backup before migration execution
auto_backup = true
backup_retention_days = 30

# Transaction-based migration for rollback capability
transactional_migrations = true
max_migration_time = 1800

# Real-time data verification during migration
verify_data_integrity = true
verify_constraints = true
verify_relationships = true

# PostgreSQL 15.x specific configuration
[postgresql_config]
# Connection pool settings for migration execution
pool_size = 10
max_overflow = 20
pool_timeout = 30
pool_recycle = 3600

# PostgreSQL-specific features
use_native_unicode = true
supports_statement_cache = true
supports_sane_rowcount = true
supports_sane_multi_rowcount = true

# Migration execution configuration
[execution_config]
# Batch size for data migration operations
batch_size = 1000

# Migration execution timeout (seconds)
execution_timeout = 1800

# Rollback trigger conditions
error_threshold = 0
performance_degradation_threshold = 200

# Comprehensive audit trail configuration
[audit_config]
# Enable comprehensive logging for compliance
enable_audit_trail = true
log_migration_steps = true
log_rollback_operations = true
log_user_operations = true

# Retention policy for audit logs
audit_log_retention_days = 365
migration_log_retention_days = 90

# Integration with external audit systems
external_audit_webhook = ${AUDIT_WEBHOOK_URL}
compliance_reporting = true

# Development and testing configuration
[development_config]
# Development-specific migration settings
enable_debug_logging = true
migration_dry_run = false
auto_approve_migrations = false

# Testing environment configuration
test_database_uri = postgresql+psycopg2://test_user:test_password@localhost:5432/test_database
test_data_fixtures = true

# Production safety configuration
[production_config]
# Production migration safety measures
require_manual_approval = true
backup_verification_required = true
rollback_plan_required = true

# Performance monitoring in production
monitor_migration_performance = true
alert_on_long_running_migrations = true
max_production_migration_time = 900

# Blue-green deployment coordination
coordinate_with_deployment = true
deployment_health_check_url = ${HEALTH_CHECK_URL}