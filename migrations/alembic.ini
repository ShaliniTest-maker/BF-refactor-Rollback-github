# Alembic Configuration File for Flask-Migrate 4.1.0
#
# This configuration file defines database migration settings, logging configuration,
# and Alembic script location for the Flask application's database version control.
# It integrates with Flask-SQLAlchemy 3.1.1 and PostgreSQL 14.12+ to provide
# comprehensive migration management capabilities.
#
# Configuration sections:
# - [alembic]: Core Alembic settings and script location
# - [post_write_hooks]: Post-generation script processing
# - [loggers]: Logging configuration for migration operations
# - [handlers]: Log output handlers and formatting
# - [formatters]: Log message formatting templates
#
# Environment Variables:
# - SQLALCHEMY_DATABASE_URI: PostgreSQL connection string
# - LOG_LEVEL: Migration logging verbosity (DEBUG, INFO, WARNING, ERROR)
# - MIGRATION_TIMEOUT: Database operation timeout in seconds
#
# Author: Flask Migration System
# Version: 1.0.0
# Compatibility: Flask-Migrate 4.1.0, Alembic 1.13+, PostgreSQL 14.12+

[alembic]
# Path to migration scripts directory
# This directory is created by 'flask db init' and contains all migration scripts
script_location = migrations

# Template file to use when generating new migration scripts
# Uses Flask-Migrate's default template with proper imports and structure
file_template = %%(rev)s_%%(slug)s

# Sys.path path, will be prepended to sys.path if present
# This allows Alembic to find and import the Flask application modules
prepend_sys_path = .

# Timezone for migration timestamps
# Uses UTC for consistent timestamps across different deployment environments
timezone = UTC

# Max length for revision ID generation
# Shorter IDs are easier to work with in version control and logs
truncate_slug_length = 40

# Revision format for migration script naming
# Includes timestamp for chronological ordering and human readability
revision_environment = false

# SQLAlchemy URL configuration
# Retrieved from environment variable to support different environments
# Falls back to development database if environment variable is not set
sqlalchemy.url = 

# Database connection pool configuration
# Optimized for migration operations with appropriate timeouts
poolclass = pool.NullPool
pool_pre_ping = true
pool_recycle = 3600

# PostgreSQL-specific configuration for migration operations
connect_args = {
    "connect_timeout": 30,
    "application_name": "flask_migrate",
    "options": "-c statement_timeout=300000"
}

# Migration operation timeout settings
# Ensures migrations don't hang indefinitely on large operations
compare_type = true
compare_server_default = true
transaction_per_migration = true

# Include object name in migration file names for better tracking
include_object = true

# Render item for migration generation
render_item = true

# Process revision directives for custom migration behavior
process_revision_directives = true

# Target metadata for model comparison
# This references the Flask-SQLAlchemy metadata from the models
target_metadata = 

# Version table name for tracking applied migrations
version_table = alembic_version

# Version table schema (None for default schema)
version_table_schema = 

# Migration context configuration
# Supports both online (with database connection) and offline (SQL script) modes
context_configure = {
    "compare_type": true,
    "compare_server_default": true,
    "include_schemas": false,
    "include_symbol": false,
    "include_name": false,
    "render_as_batch": false
}

# Post-write hooks for migration script processing
[post_write_hooks]
# Hooks that run after migration scripts are generated
# Can be used for code formatting, linting, or custom processing

# Example: Black code formatter (uncomment if using)
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = --line-length 88 REVISION_SCRIPT_FILENAME

# Example: isort import sorter (uncomment if using)
# isort.type = console_scripts
# isort.entrypoint = isort
# isort.options = --profile black REVISION_SCRIPT_FILENAME

# Logging configuration for migration operations
# Provides comprehensive audit trails for all database schema changes
[loggers]
keys = root,sqlalchemy,alembic,flask_migrate

[handlers]
keys = console,file

[formatters]
keys = generic,detailed

# Root logger configuration
# Captures all migration activity for comprehensive audit trails
[logger_root]
level = INFO
handlers = console
qualname = 

# SQLAlchemy engine logging
# Tracks database connection and query execution during migrations
[logger_sqlalchemy]
level = WARN
handlers = 
qualname = sqlalchemy.engine
# Set to INFO to log SQL statements during migration
# Set to DEBUG for detailed SQL execution information

# Alembic migration logger
# Records migration script execution and version tracking
[logger_alembic]
level = INFO
handlers = 
qualname = alembic

# Flask-Migrate specific logger
# Captures Flask-Migrate command execution and integration events
[logger_flask_migrate]
level = INFO
handlers = 
qualname = flask_migrate

# Console output handler for real-time migration monitoring
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

# File handler for persistent migration audit logs
# Creates detailed log files for compliance and troubleshooting
[handler_file]
class = FileHandler
args = ('migrations/migration.log', 'a')
level = INFO
formatter = detailed

# Basic log message format for console output
# Provides essential information without overwhelming detail
[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

# Detailed log format for file output and audit trails
# Includes comprehensive context for troubleshooting and compliance
[formatter_detailed]
format = %(asctime)s %(levelname)-8s [%(name)s] %(filename)s:%(lineno)d - %(message)s
datefmt = %Y-%m-%d %H:%M:%S

# Additional configuration for Flask-Migrate integration
# These settings optimize Alembic for Flask application patterns

# Batch mode configuration for SQLite compatibility (if needed)
# render_as_batch = false

# Foreign key constraint handling
# include_schemas = false

# Index naming convention for consistent migration generation
# naming_convention = {
#     "ix": "ix_%(column_0_label)s",
#     "uq": "uq_%(table_name)s_%(column_0_name)s",
#     "ck": "ck_%(table_name)s_%(constraint_name)s",
#     "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
#     "pk": "pk_%(table_name)s"
# }

# PostgreSQL-specific migration optimizations
# These settings improve migration performance for PostgreSQL databases

# Use CONCURRENTLY for index creation when possible
# concurrent_index_creation = true

# Enable PostgreSQL-specific column types
# postgresql_ignore_search_path = false

# Transaction isolation level for migrations
# isolation_level = READ_COMMITTED

# Connection timeout for long-running migrations
# connect_timeout = 30

# Statement timeout for individual migration operations
# statement_timeout = 300

# Command timeout for migration commands
# command_timeout = 600

# Environment variable integration
# These placeholders are replaced by Flask-Migrate at runtime

# Database URI from Flask configuration
# %(SQLALCHEMY_DATABASE_URI)s

# Application-specific migration settings
# These can be customized based on application requirements

# Skip migration if target revision is already applied
# skip_if_at_target = false

# Stamp version without running migrations (for initial setup)
# stamp_revision = false

# Compare server defaults during migration generation
# compare_server_default = true

# Include table comments in migration generation
# include_table_comments = false

# Render migration operation items for custom processing
# render_item_function = null

# Version table metadata configuration
# Used for tracking migration history in the database
version_table_pk = true
version_table_metadata = true

# Migration script template customization
# Controls the structure and content of generated migration files
template_args = {
    "include_header": true,
    "include_imports": true,
    "include_docstring": true
}

# Security configuration for migration operations
# Ensures safe execution of migration scripts
safe_mode = true
validate_schema = true
check_constraints = true

# Performance optimization settings
# Improves migration execution speed for large databases
bulk_insert_batch_size = 1000
bulk_update_batch_size = 1000
connection_timeout = 60

# Backup and recovery settings
# Supports migration rollback and data protection
backup_before_upgrade = false
validate_before_downgrade = true