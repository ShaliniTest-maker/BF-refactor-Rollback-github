[tool:pytest]
# Pytest 8.3.3 configuration for Flask application testing
# Replaces Node.js testing framework per Section 3.6.3

# Test discovery patterns for Flask application structure
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Flask testing integration with pytest-flask plugin per Section 3.6.3
addopts = 
    # Verbose output for detailed test execution information
    -v
    # Show local variables in tracebacks for better debugging
    --tb=short
    # Strict mode for warnings to catch potential issues early
    --strict-warnings
    # Coverage reporting with pytest-cov per Section 4.7.3
    --cov=blueprints
    --cov=models
    --cov=services
    --cov=app
    --cov=config
    # Coverage reporting configuration â‰¥95% requirement per Section 4.7.5
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    # Minimum coverage threshold enforcement
    --cov-fail-under=95
    # Branch coverage analysis for comprehensive testing
    --cov-branch
    # Performance benchmarking integration per Section 4.7.4
    --benchmark-only-fail-on-error
    --benchmark-sort=mean
    --benchmark-autosave
    # Parallel test execution support per Section 3.6.3
    -n auto
    # Database transaction isolation configuration
    --reuse-db
    # Filter warnings for cleaner output
    -W ignore::DeprecationWarning
    -W ignore::PendingDeprecationWarning

# Test markers for categorization per Section 3.6.3
markers =
    # Unit tests for individual components and functions
    unit: Unit tests for isolated component testing
    # Integration tests for component interaction validation
    integration: Integration tests for Flask blueprint and service interaction
    # End-to-end tests for complete workflow validation
    e2e: End-to-end tests for complete system workflow validation
    # API tests for RESTful endpoint validation
    api: API endpoint tests for request/response validation
    # Database tests for SQLAlchemy model and transaction testing
    database: Database tests for SQLAlchemy model validation
    # Authentication tests for security and session management
    auth: Authentication and authorization tests
    # Performance tests for benchmark validation against Node.js baseline
    performance: Performance benchmarking tests with pytest-benchmark
    # Service layer tests for business logic validation
    service: Service layer tests for business logic workflows
    # Model tests for database schema and relationship validation
    model: Model tests for SQLAlchemy declarative model validation
    # Blueprint tests for Flask route and request handling validation
    blueprint: Blueprint tests for Flask route definitions
    # Slow tests that require extended execution time
    slow: Tests requiring extended execution time
    # Security tests for vulnerability and authentication validation
    security: Security validation tests

# Minimum Python version requirement
minversion = 6.0

# Required plugins for Flask testing integration
required_plugins = 
    pytest-flask>=1.3.0
    pytest-cov>=4.0.0
    pytest-benchmark>=4.0.0
    pytest-xdist>=3.0.0
    pytest-mock>=3.10.0
    pytest-html>=3.0.0

# Test timeout configuration to prevent hanging tests
timeout = 300
timeout_method = thread

# Flask-specific configuration
# Application factory fixture configuration
FLASK_APP = app.py

# Test database configuration for SQLAlchemy session management
# Per Section 3.6.3 database testing fixtures
filterwarnings =
    ignore::sqlalchemy.exc.SADeprecationWarning
    ignore::sqlalchemy.exc.SAWarning
    ignore::flask_sqlalchemy.model.DefaultMeta.DeprecationWarning

# Log configuration for test execution
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Benchmark configuration for performance validation per Section 4.7.4
benchmark-skip = false
benchmark-disable-gc = false
benchmark-histogram = true
benchmark-max-time = 5.0
benchmark-min-rounds = 5
benchmark-warmup = true

# Test collection configuration
collect_ignore = [
    "setup.py",
    "migrations/",
    "static/",
    "templates/",
    ".git/",
    "__pycache__/",
    "*.pyc",
    ".pytest_cache/",
    "htmlcov/",
    "dist/",
    "build/"
]

# Custom test execution order configuration
# Critical tests first, then unit, integration, and finally performance
testmon = true

# Django-style factory configuration for Factory Boy integration
# Per Section 4.7.3.2 test data management
factory_boy_strategy = CREATE

# Database session configuration for test isolation
# Per Section 4.7.3.1 database testing setup
database_transaction_isolation = true
database_rollback_on_teardown = true

# Parallel execution configuration per Section 3.6.3
# Optimal worker count based on available CPU cores
dist = worksteal
tx = popen

# Coverage source configuration
# Excludes test files and migration scripts from coverage calculation
omit = 
    tests/*
    migrations/*
    venv/*
    .venv/*
    */site-packages/*
    setup.py
    conftest.py

# JUnit XML configuration for CI/CD integration
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = true