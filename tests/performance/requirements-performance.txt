# Performance Testing Requirements for Flask Migration Validation
# This file defines all performance testing dependencies required for comprehensive
# benchmarking, profiling, and analysis during the Node.js to Python 3.13.3/Flask 3.1.1 migration
# Ensures consistent performance testing environment setup with specific versions for
# statistical measurement, memory profiling, load testing, and migration validation

# ==============================================================================
# CORE PERFORMANCE TESTING FRAMEWORK - Section 4.7.1
# pytest-benchmark 5.1.0 for statistical performance measurement and baseline comparison
# ==============================================================================
pytest-benchmark==5.1.0        # Statistical performance measurement with Flask API benchmarking
pytest-xdist>=3.5.0           # Parallel test execution for comprehensive performance coverage
pytest-timeout>=2.2.0         # Test timeout management for performance regression detection

# ==============================================================================
# MULTI-ENVIRONMENT TESTING ORCHESTRATION - Section 4.7.2
# tox 4.26.0 for comprehensive multi-environment testing and Flask/Node.js comparison
# ==============================================================================
tox==4.26.0                    # Multi-environment testing orchestration for migration validation
virtualenv>=20.25.0            # Virtual environment management for isolated performance testing

# ==============================================================================
# MEMORY PROFILING AND ANALYSIS - Section 6.5.1.1
# Comprehensive memory usage monitoring and Python GC analysis tools
# ==============================================================================
memory_profiler>=0.61.0        # Line-by-line memory usage profiling for Flask applications
pympler>=0.9                   # Advanced Python memory analysis and leak detection
psutil>=5.9.6                  # System memory and process monitoring utilities
tracemalloc-tools>=0.2.2       # Python memory allocator statistics and optimization insights

# ==============================================================================
# STATISTICAL ANALYSIS AND REPORTING - Section 4.11.3
# Statistical packages for performance data analysis and trend monitoring
# ==============================================================================
numpy>=1.24.0                  # Numerical computing for statistical performance analysis
scipy>=1.11.0                  # Statistical functions for performance distribution analysis
pandas>=2.1.0                  # Data analysis for performance metrics and baseline comparison
matplotlib>=3.8.0              # Performance visualization and trend analysis charts
seaborn>=0.13.0                # Enhanced statistical visualization for performance reports

# ==============================================================================
# FLASK PERFORMANCE TESTING EXTENSIONS - Section 5.1.1
# Flask-specific testing tools and monitoring dependencies
# ==============================================================================
Flask-Testing>=0.8.1           # Enhanced Flask testing utilities for performance validation
prometheus_flask_exporter>=0.23.0  # Flask metrics collection for performance monitoring
Flask-MonitoringDashboard>=3.1.0   # Real-time Flask application performance monitoring

# ==============================================================================
# THREADING AND CONCURRENT TESTING - Section 4.7.1
# Load testing framework dependencies for concurrent user simulation
# ==============================================================================
locust>=2.17.0                 # Modern load testing framework for Flask applications
gevent>=23.9.0                 # Asynchronous networking for concurrent load simulation
greenlet>=3.0.0                # Lightweight microthreads for concurrent testing scenarios
requests>=2.31.0               # HTTP client for API performance benchmarking

# ==============================================================================
# DATABASE PERFORMANCE TESTING - Section 6.5.2.2
# SQLAlchemy performance monitoring and database benchmarking tools
# ==============================================================================
SQLAlchemy-Utils>=0.41.0       # Enhanced SQLAlchemy utilities for performance testing
alembic>=1.13.0                # Database migration performance validation
factory_boy>=3.3.0             # Test data generation for database performance scenarios

# ==============================================================================
# OPENTELEMETRY INSTRUMENTATION - Section 6.5.1.3
# Distributed tracing and metrics collection for performance analysis
# ==============================================================================
opentelemetry-api>=1.21.0      # OpenTelemetry API for custom performance instrumentation
opentelemetry-sdk>=1.21.0      # OpenTelemetry SDK for metrics and tracing collection
opentelemetry-instrumentation-flask>=0.42b0    # Flask auto-instrumentation for performance tracking
opentelemetry-instrumentation-sqlalchemy>=0.42b0   # SQLAlchemy performance instrumentation
opentelemetry-exporter-prometheus>=1.12.0rc1   # Prometheus metrics export for performance monitoring

# ==============================================================================
# CONCURRENT AND ASYNCHRONOUS TESTING - Section 4.7.1
# Advanced concurrency testing tools for Flask application load validation
# ==============================================================================
asyncio-timeout>=4.0.3         # Timeout management for concurrent performance tests
aiohttp>=3.9.0                 # Asynchronous HTTP client for concurrent API testing
httpx>=0.25.0                  # Modern HTTP client with async support for load testing
uvloop>=0.19.0                 # High-performance asyncio event loop for load testing

# ==============================================================================
# PERFORMANCE PROFILING TOOLS - Section 6.5.1.1
# Advanced Python profiling tools for detailed performance analysis
# ==============================================================================
py-spy>=0.3.14                 # Sampling profiler for production Flask performance analysis
line_profiler>=4.1.1           # Line-by-line performance profiling for optimization
cProfile-tools>=1.2.0          # Enhanced cProfile utilities for performance analysis
snakeviz>=2.2.0                # cProfile visualization tool for performance bottleneck identification

# ==============================================================================
# AUTH0 PERFORMANCE TESTING - Section 4.11.1
# Authentication flow performance validation and benchmarking
# ==============================================================================
Auth0-Python==4.9.0            # Auth0 SDK for authentication performance testing
PyJWT>=2.8.0                   # JWT processing performance validation
cryptography>=41.0.0           # Cryptographic operations performance testing

# ==============================================================================
# BASELINE COMPARISON TOOLS - Section 4.7.2
# Tools for comparing Flask performance against Node.js baseline metrics
# ==============================================================================
deepdiff>=6.7.0                # Deep comparison of performance metrics and API responses
jsondiff>=2.0.0                # JSON response comparison for API parity validation
dictdiffer>=0.9.0              # Dictionary comparison for configuration and response analysis

# ==============================================================================
# SYSTEM MONITORING AND METRICS - Section 6.5.1.1
# System-level monitoring tools for comprehensive performance validation
# ==============================================================================
resource>=0.2.1                # Python resource monitoring and limit management
pynvml>=11.5.0                 # NVIDIA GPU monitoring (if applicable for ML workloads)
docker>=6.1.0                  # Docker container performance monitoring

# ==============================================================================
# DATA VALIDATION AND SERIALIZATION TESTING
# Performance testing for data processing and API response formatting
# ==============================================================================
marshmallow>=3.20.0            # Serialization performance testing for API responses
jsonschema>=4.20.0             # JSON schema validation performance testing
pydantic>=2.5.0                # Data validation performance benchmarking

# ==============================================================================
# LOAD TESTING UTILITIES - Section 4.7.1
# Additional utilities for comprehensive load testing scenarios
# ==============================================================================
faker>=20.1.0                  # Test data generation for realistic load testing scenarios
mimesis>=11.1.0                # High-performance fake data generation for load tests
hypothesis>=6.92.0             # Property-based testing for performance edge cases

# ==============================================================================
# REPORTING AND VISUALIZATION - Section 4.11.1
# Enhanced reporting tools for performance test results and migration validation
# ==============================================================================
pytest-html>=4.1.1             # HTML reporting for performance test results
pytest-json-report>=1.5.0      # JSON reporting for automated performance analysis
allure-pytest>=2.13.2          # Advanced test reporting with performance metrics integration
jinja2>=3.1.2                  # Template engine for custom performance reports

# ==============================================================================
# CONCURRENT DATABASE TESTING
# Specialized tools for database concurrency and connection pool testing
# ==============================================================================
SQLAlchemy>=2.0.0              # Core ORM for database performance testing
psycopg2-binary>=2.9.7         # PostgreSQL driver for database performance benchmarking
connection-pool>=0.0.3         # Connection pool testing utilities

# ==============================================================================
# FLASK EXTENSION PERFORMANCE TESTING
# Testing tools for Flask extension performance validation
# ==============================================================================
Flask-CORS>=4.0.0              # CORS performance impact testing
Flask-Limiter>=3.5.0           # Rate limiting performance validation
Flask-JWT-Extended>=4.7.1      # JWT extension performance testing

# ==============================================================================
# VERSION COMPATIBILITY AND PERFORMANCE NOTES
# ==============================================================================
# All packages are compatible with Python 3.13.3 runtime environment
# Core testing dependencies maintain compatibility with Flask 3.1.1 ecosystem
# pytest-benchmark 5.1.0 provides statistical significance testing for performance comparisons
# tox 4.26.0 enables comprehensive multi-environment testing with isolated virtual environments
# Memory profiling tools provide detailed analysis of Python GC pause times and allocator statistics
# OpenTelemetry instrumentation enables comprehensive Flask application performance monitoring
# Statistical analysis packages support detailed performance trend analysis and baseline comparison
# Load testing frameworks validate concurrent user capacity and system throughput
# Database performance tools ensure SQLAlchemy query optimization and connection pool efficiency
#
# Performance Testing Targets per Section 4.11.1:
# - API Response Time: <200ms average (Flask endpoints)
# - Database Query Response: <100ms average (SQLAlchemy operations)
# - Authentication Response: <150ms average (Auth0 integration with ItsDangerous)
# - System Availability: 99.9% uptime (Flask application health)
#
# For performance testing execution:
# - Use tox for multi-environment testing orchestration
# - Execute pytest-benchmark with statistical validation
# - Monitor memory usage with memory_profiler and pympler
# - Validate concurrent load handling with locust and gevent
# - Compare performance metrics against Node.js baseline using statistical analysis
# - Ensure comprehensive coverage of Flask blueprints, service layer, and database operations