# Pytest Configuration for Flask Application Testing
# Supporting Node.js to Flask 3.1.1 migration with comprehensive validation
# Section Reference: 3.6.3 Testing and Quality Assurance, 4.7 Testing and Validation Workflow

[tool:pytest]

# Test Discovery Patterns - Replacing Node.js test patterns per Section 0.2.1
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
testpaths = tests

# Minimum Pytest version enforcement for Flask compatibility
minversion = 8.3.3

# Parallel Test Execution Configuration - Section 3.6.3
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --color=yes
    --durations=10
    --maxfail=5
    --capture=no
    --showlocals
    # Coverage reporting with HTML output per Section 4.7.3.1
    --cov=blueprints
    --cov=models
    --cov=services
    --cov=app
    --cov-report=html:tests/coverage_html
    --cov-report=term-missing
    --cov-report=xml:tests/coverage.xml
    --cov-fail-under=95
    --cov-branch
    # Performance benchmarking integration per Section 4.7.4.1
    --benchmark-only
    --benchmark-sort=mean
    --benchmark-warmup=on
    --benchmark-warmup-iterations=3
    --benchmark-min-rounds=5
    --benchmark-max-time=0.5
    --benchmark-timer=time.perf_counter
    --benchmark-disable-gc
    --benchmark-json=tests/benchmark_results.json
    --benchmark-histogram=tests/benchmark_histogram.svg
    # Flask testing integration
    --flake8
    --mypy
    --mypy-ignore-missing-imports

# Custom Test Markers for Categorization - Section 3.6.3
markers =
    unit: Unit tests for individual components and functions
    integration: Integration tests for API endpoints and database operations
    e2e: End-to-end tests for complete workflow validation
    performance: Performance benchmarking tests with SLA validation
    auth: Authentication and authorization security tests
    database: Database model and transaction tests
    api: RESTful API endpoint validation tests
    service: Business logic service layer tests
    migration: Database migration and schema validation tests
    benchmark: Performance benchmark comparison with Node.js baseline
    slow: Tests that take longer than 1 second to execute
    functional_parity: Tests validating 100% functional equivalence with Node.js
    security: Security validation and vulnerability tests
    mock: Tests using mock services and external dependencies
    smoke: Critical path smoke tests for production readiness
    regression: Regression tests preventing functionality degradation

# Test Session Configuration
console_output_style = progress
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = true

# Warning Configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:distutils.*
    ignore::DeprecationWarning:setuptools.*
    ignore::PendingDeprecationWarning
    ignore::pytest.PytestUnraisableExceptionWarning

# Python Path Configuration for Flask Application
pythonpath = .

# Cache Configuration for Test Optimization
cache_dir = tests/.pytest_cache

# Collection Configuration
collect_ignore = [
    "setup.py",
    "migrations/",
    "static/",
    "templates/"
]

# Test Timeout Configuration (prevents hanging tests)
timeout = 300
timeout_method = thread

# Logging Configuration for Test Debugging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Flask Testing Configuration
flask_app = app:create_app
flask_testing_config = TestingConfig

# Benchmark Configuration for Performance Validation - Section 4.7.4.1
benchmark_sort = mean
benchmark_compare_fail = mean:20%
benchmark_skip_name_check = true
benchmark_disable_gc = true
benchmark_warmup = true
benchmark_warmup_iterations = 3
benchmark_min_rounds = 5
benchmark_max_time = 2.0
benchmark_timer = time.perf_counter

# Performance SLA Thresholds (Node.js baseline comparison)
benchmark_max_time_api = 0.200  # 200ms max API response time per Section 4.7.4.1
benchmark_max_time_database = 0.050  # 50ms max database query time
benchmark_max_time_auth = 0.100  # 100ms max authentication validation time

# Coverage Configuration Details
cov_report_include = 
    app.py
    blueprints/*
    models/*
    services/*
    config.py

cov_report_exclude = 
    tests/*
    migrations/*
    static/*
    templates/*
    __pycache__/*
    .git/*
    .tox/*
    .pytest_cache/*
    setup.py
    conftest.py

# Parallel Execution Configuration
dist = worksteal
tx = popen//python
workers = auto
rsyncdirs = blueprints models services

# Test Result Output Configuration
result_log = tests/pytest_results.log
junitxml = tests/junit_results.xml

# Database Testing Configuration
database_url_test = sqlite:///tests/test_database.db
database_isolation = transaction

# Mock Configuration for External Dependencies
mock_auth0 = true
mock_external_apis = true
mock_email_service = true

# CI/CD Integration Settings
ci_reporting = true
ci_fail_on_coverage_below = 95
ci_fail_on_performance_regression = true

# Flask Application Testing Environment Variables
flask_env = testing
flask_debug = false
testing = true