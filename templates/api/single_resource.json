{
  "meta": {
    "timestamp": "{{ timestamp | default(moment().utc().format('YYYY-MM-DDTHH:mm:ss.SSS[Z]')) }}",
    "correlation_id": "{{ correlation_id | default(request.headers.get('X-Correlation-ID', generate_uuid())) }}",
    "request_id": "{{ request_id | default(request.headers.get('X-Request-ID', generate_uuid())) }}",
    "api_version": "{{ api_version | default('v1') }}",
    "server_timestamp": "{{ server_timestamp | default(moment().utc().format('YYYY-MM-DDTHH:mm:ss.SSS[Z]')) }}",
    "environment": "{{ environment | default(config.ENV) }}",
    "trace_id": "{{ trace_id | default(request.headers.get('X-Trace-ID')) }}",
    "resource_type": "{{ resource_type | default(resource.__class__.__name__ | lower if resource else 'unknown') }}",
    "resource_id": "{{ resource_id | default(resource.id if resource and hasattr(resource, 'id') else null) }}",
    "resource_version": "{{ resource_version | default(resource.version if resource and hasattr(resource, 'version') else null) }}",
    "etag": "{{ etag | default(resource.etag if resource and hasattr(resource, 'etag') else null) }}",
    "last_modified": "{{ last_modified | default(resource.updated_at.isoformat() if resource and hasattr(resource, 'updated_at') and resource.updated_at else null) }}"
  },
  "status": {
    "code": {{ status_code | default(200) }},
    "message": "{{ status_message | default('Resource retrieved successfully' if resource else 'Resource not found') }}",
    "success": {{ success | default('true' if resource else 'false') }},
    "error": {{ error | default('null' if resource else 'null') }}
  },
  "request": {
    "method": "{{ request_method | default(request.method) }}",
    "path": "{{ request_path | default(request.path) }}",
    "endpoint": "{{ request_endpoint | default(request.endpoint) }}",
    "user_agent": "{{ user_agent | default(request.headers.get('User-Agent', 'Unknown')) | truncate(100) }}",
    "ip_address": "{{ client_ip | default(request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)) }}",
    "query_params": {{ query_params | default(request.args.to_dict()) | tojson }},
    "content_type": "{{ content_type | default(request.content_type) }}",
    "resource_request": {
      "requested_id": "{{ requested_id | default(request.view_args.get('id') if request.view_args else null) }}",
      "include_fields": {{ include_fields | default([]) | tojson }},
      "exclude_fields": {{ exclude_fields | default([]) | tojson }},
      "expand_relations": {{ expand_relations | default([]) | tojson }}
    }
  },
  "response": {
    "content_type": "application/json",
    "encoding": "utf-8",
    "cache_control": "{{ cache_control | default('private, max-age=300' if resource else 'no-cache, no-store, must-revalidate') }}",
    "etag": "{{ response_etag | default(resource.etag if resource and hasattr(resource, 'etag') else null) }}",
    "last_modified": "{{ response_last_modified | default(resource.updated_at.strftime('%a, %d %b %Y %H:%M:%S GMT') if resource and hasattr(resource, 'updated_at') and resource.updated_at else null) }}",
    "expires": "{{ expires | default(null) }}",
    "resource_format": "single",
    "serialization_depth": {{ serialization_depth | default(1) }},
    "field_filters_applied": {{ field_filters_applied | default('false') }}
  },
  "security": {
    "authenticated": {{ authenticated | default('false') }},
    "user_id": "{{ user_id | default(null) }}",
    "permissions": {{ permissions | default([]) | tojson }},
    "session_id": "{{ session_id | default(session.get('session_id', null)) }}",
    "csrf_token": "{{ csrf_token | default(null) }}",
    "rate_limit": {
      "remaining": {{ rate_limit_remaining | default(null) }},
      "limit": {{ rate_limit_limit | default(null) }},
      "reset_time": "{{ rate_limit_reset | default(null) }}"
    },
    "resource_access": {
      "can_read": {{ can_read | default('true' if resource else 'false') }},
      "can_update": {{ can_update | default('false') }},
      "can_delete": {{ can_delete | default('false') }},
      "ownership": "{{ ownership | default('unknown') }}"
    }
  },
  "data": {% if resource %}{
    "id": {{ resource.id | tojson if hasattr(resource, 'id') else 'null' }},
    "type": "{{ resource_type | default(resource.__class__.__name__ | lower) }}",
    "attributes": {% if resource_attributes %}{{ resource_attributes | tojson }}{% else %}{
      {% for attr, value in resource.__dict__.items() if not attr.startswith('_') and attr not in ['id'] %}
      {% if not callable(value) and not attr in (exclude_fields | default([])) and (not include_fields or attr in include_fields) %}
      "{{ attr }}": {% if value is none %}null{% elif value is string %}"{{ value | escape }}"{% elif value is number %}{{ value }}{% elif value is boolean %}{{ value | lower }}{% elif value.isoformat is defined %}"{{ value.isoformat() }}"{% else %}{{ value | tojson }}{% endif %}{% if not loop.last %},{% endif %}
      {% endif %}
      {% endfor %}
    }{% endif %},
    "relationships": {
      {% if resource_relationships %}
      {% for rel_name, rel_data in resource_relationships.items() %}
      "{{ rel_name }}": {
        "data": {{ rel_data.data | tojson if rel_data.data else 'null' }},
        "links": {
          "self": "{{ url_for(request.endpoint, id=resource.id, _external=True) }}/relationships/{{ rel_name }}",
          "related": "{{ rel_data.related_url | default(url_for(rel_data.endpoint, id=resource.id, _external=True)) if rel_data.endpoint else null }}"
        }{% if rel_data.meta %},
        "meta": {{ rel_data.meta | tojson }}
        {% endif %}
      }{% if not loop.last %},{% endif %}
      {% endfor %}
      {% else %}
      {% for column in resource.__table__.columns if hasattr(resource, '__table__') %}
      {% if column.foreign_keys %}
      {% for fk in column.foreign_keys %}
      "{{ fk.column.table.name }}": {
        "data": {{ getattr(resource, column.name) | tojson if getattr(resource, column.name, null) else 'null' }},
        "links": {
          "self": "{{ url_for(request.endpoint, id=resource.id, _external=True) }}/relationships/{{ fk.column.table.name }}",
          "related": "{{ url_for('api.' + fk.column.table.name + '.get_' + fk.column.table.name, id=getattr(resource, column.name), _external=True) if getattr(resource, column.name, null) else null }}"
        }
      }{% if not loop.last %},{% endif %}
      {% endfor %}
      {% endif %}
      {% endfor %}
      {% endif %}
    },
    "meta": {
      "created_at": "{{ resource.created_at.isoformat() if hasattr(resource, 'created_at') and resource.created_at else null }}",
      "updated_at": "{{ resource.updated_at.isoformat() if hasattr(resource, 'updated_at') and resource.updated_at else null }}",
      "version": {{ resource.version if hasattr(resource, 'version') else 'null' }},
      "revision": "{{ resource.revision if hasattr(resource, 'revision') else null }}",
      "status": "{{ resource.status if hasattr(resource, 'status') else 'active' }}",
      "visibility": "{{ resource.visibility if hasattr(resource, 'visibility') else 'public' }}",
      "read_only": {{ resource.read_only | lower if hasattr(resource, 'read_only') else 'false' }},
      "soft_deleted": {{ resource.deleted_at is not none if hasattr(resource, 'deleted_at') else 'false' }},
      "computed_fields": {{ computed_fields | default({}) | tojson }},
      "validation_state": "{{ validation_state | default('valid') }}"
    }
  }{% else %}null{% endif %},
  "pagination": null,
  "links": {
    "self": "{{ self_link | default(request.url) }}",
    "api_root": "{{ api_root | default(url_for('api.root', _external=True)) }}",
    "documentation": "{{ documentation_link | default(url_for('api.docs', _external=True)) }}",
    {% if resource %}
    "resource": {
      "self": "{{ url_for(request.endpoint, id=resource.id, _external=True) if hasattr(resource, 'id') else request.url }}",
      "edit": "{{ edit_link | default(url_for(request.endpoint, id=resource.id, _external=True) if can_update and hasattr(resource, 'id') else null) }}",
      "delete": "{{ delete_link | default(url_for(request.endpoint, id=resource.id, _external=True) if can_delete and hasattr(resource, 'id') else null) }}",
      "collection": "{{ collection_link | default(url_for(request.endpoint.rsplit('.', 1)[0] + '.list', _external=True) if '.' in request.endpoint else null) }}",
      "schema": "{{ schema_link | default(url_for('api.schema', resource_type=resource_type, _external=True) if resource_type else null) }}"
    },
    {% endif %}
    "navigation": {
      {% if navigation_links %}
      {% for nav_name, nav_url in navigation_links.items() %}
      "{{ nav_name }}": "{{ nav_url }}"{% if not loop.last %},{% endif %}
      {% endfor %}
      {% else %}
      "parent": "{{ parent_link | default(null) }}",
      "children": "{{ children_link | default(null) }}",
      "siblings": "{{ siblings_link | default(null) }}"
      {% endif %}
    },
    "actions": [
      {% if available_actions %}
      {% for action in available_actions %}
      {
        "name": "{{ action.name }}",
        "method": "{{ action.method | default('POST') }}",
        "href": "{{ action.href }}",
        "title": "{{ action.title | default(action.name) }}",
        "type": "{{ action.type | default('application/json') }}"
      }{% if not loop.last %},{% endif %}
      {% endfor %}
      {% endif %}
    ]
  },
  "audit": {
    "logged_at": "{{ audit_timestamp | default(moment().utc().format('YYYY-MM-DDTHH:mm:ss.SSS[Z]')) }}",
    "operation": "{{ operation | default(request.endpoint) }}",
    "resource": "{{ resource_type | default('unknown') }}",
    "resource_id": "{{ resource.id if resource and hasattr(resource, 'id') else null }}",
    "action": "{{ action | default(request.method.lower()) }}",
    "result": "{{ audit_result | default('success' if success else 'failure') }}",
    "duration_ms": {{ duration_ms | default(null) }},
    "response_size": {{ response_size | default(null) }},
    "changes": {{ audit_changes | default([]) | tojson }},
    "previous_values": {{ previous_values | default({}) | tojson }}
  },
  "performance": {
    "request_start": "{{ request_start_time | default(null) }}",
    "request_end": "{{ request_end_time | default(moment().utc().format('YYYY-MM-DDTHH:mm:ss.SSS[Z]')) }}",
    "processing_time_ms": {{ processing_time_ms | default(null) }},
    "database_queries": {{ database_queries | default(null) }},
    "cache_hits": {{ cache_hits | default(null) }},
    "memory_usage": {{ memory_usage | default(null) }},
    "serialization_time_ms": {{ serialization_time_ms | default(null) }},
    "template_render_time_ms": {{ template_render_time_ms | default(null) }}
  },
  "debug": {% if config.DEBUG %}{
    "flask_version": "{{ flask_version | default('3.1.1') }}",
    "python_version": "{{ python_version | default('3.13.3') }}",
    "request_headers": {{ debug_headers | default(dict(request.headers)) | tojson }},
    "session_data": {{ debug_session | default(dict(session)) | tojson }},
    "template_name": "{{ template_name | default('single_resource.json') }}",
    "blueprint": "{{ blueprint | default(request.blueprint) }}",
    "resource_debug": {
      "model_class": "{{ resource.__class__.__name__ if resource else null }}",
      "model_module": "{{ resource.__class__.__module__ if resource else null }}",
      "table_name": "{{ resource.__table__.name if resource and hasattr(resource, '__table__') else null }}",
      "primary_key": {{ resource.__mapper__.primary_key[0].name if resource and hasattr(resource, '__mapper__') else 'null' }},
      "relationships_available": {{ list(resource.__mapper__.relationships.keys()) if resource and hasattr(resource, '__mapper__') else [] | tojson }},
      "columns_available": {{ list(resource.__table__.columns.keys()) if resource and hasattr(resource, '__table__') else [] | tojson }}
    }
  }{% else %}null{% endif %},
  "warnings": {{ warnings | default([]) | tojson }},
  "notifications": {{ notifications | default([]) | tojson }},
  "included": {% if included_resources %}{{ included_resources | tojson }}{% else %}[]{% endif %}
}