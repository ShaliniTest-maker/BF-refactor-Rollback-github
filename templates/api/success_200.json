{%- extends "api/base_response.json" -%}

{%- block data -%}
{%- if data is mapping -%}
  {%- if data.items or data.results -%}
    {
      "items": {{ (data.items or data.results) | tojson }},
      "count": {{ (data.items or data.results) | length }},
      "total_count": {{ data.total_count | default((data.items or data.results) | length) }},
      "has_items": {{ ((data.items or data.results) | length > 0) | lower }},
      "resource_type": "{{ data.resource_type | default(resource_type) | default('collection') }}",
      "schema_version": "{{ data.schema_version | default(api_version) | default('v1') }}",
      "data_format": "{{ data.data_format | default('json') }}",
      "content_encoding": "{{ data.content_encoding | default('utf-8') }}",
      "last_updated": "{{ data.last_updated | default(moment().utc().format('YYYY-MM-DDTHH:mm:ss.SSS[Z]')) }}",
      "etag": "{{ data.etag | default(generate_etag(data.items or data.results)) }}",
      "cache_key": "{{ data.cache_key | default(generate_cache_key(request.endpoint, request.args)) }}",
      "validation_passed": {{ data.validation_passed | default('true') }},
      "aggregations": {{ data.aggregations | default({}) | tojson }},
      "filters_applied": {{ data.filters_applied | default([]) | tojson }},
      "sort_criteria": {{ data.sort_criteria | default([]) | tojson }},
      "included_fields": {{ data.included_fields | default([]) | tojson }},
      "excluded_fields": {{ data.excluded_fields | default([]) | tojson }}
      {%- if data.metadata -%}
      ,
      "metadata": {{ data.metadata | tojson }}
      {%- endif -%}
    }
  {%- else -%}
    {
      "result": {{ data | tojson }},
      "resource_type": "{{ data.resource_type | default(resource_type) | default('single') }}",
      "schema_version": "{{ data.schema_version | default(api_version) | default('v1') }}",
      "data_format": "{{ data.data_format | default('json') }}",
      "content_encoding": "{{ data.content_encoding | default('utf-8') }}",
      "last_updated": "{{ data.last_updated | default(moment().utc().format('YYYY-MM-DDTHH:mm:ss.SSS[Z]')) }}",
      "etag": "{{ data.etag | default(generate_etag(data)) }}",
      "cache_key": "{{ data.cache_key | default(generate_cache_key(request.endpoint, request.args)) }}",
      "validation_passed": {{ data.validation_passed | default('true') }},
      "resource_id": "{{ data.resource_id | default(data.id) | default(null) }}",
      "resource_version": "{{ data.resource_version | default(data.version) | default(null) }}",
      "relationships": {{ data.relationships | default({}) | tojson }}
      {%- if data.metadata -%}
      ,
      "metadata": {{ data.metadata | tojson }}
      {%- endif -%}
    }
  {%- endif -%}
{%- elif data is iterable and data is not string -%}
  {
    "items": {{ data | tojson }},
    "count": {{ data | length }},
    "total_count": {{ total_count | default(data | length) }},
    "has_items": {{ (data | length > 0) | lower }},
    "resource_type": "{{ resource_type | default('collection') }}",
    "schema_version": "{{ api_version | default('v1') }}",
    "data_format": "json",
    "content_encoding": "utf-8",
    "last_updated": "{{ moment().utc().format('YYYY-MM-DDTHH:mm:ss.SSS[Z]') }}",
    "etag": "{{ generate_etag(data) }}",
    "cache_key": "{{ generate_cache_key(request.endpoint, request.args) }}",
    "validation_passed": true,
    "aggregations": {{ aggregations | default({}) | tojson }},
    "filters_applied": {{ filters_applied | default([]) | tojson }},
    "sort_criteria": {{ sort_criteria | default([]) | tojson }},
    "included_fields": {{ included_fields | default([]) | tojson }},
    "excluded_fields": {{ excluded_fields | default([]) | tojson }}
  }
{%- else -%}
  {
    "result": {{ data | tojson }},
    "resource_type": "{{ resource_type | default('single') }}",
    "schema_version": "{{ api_version | default('v1') }}",
    "data_format": "json",
    "content_encoding": "utf-8",
    "last_updated": "{{ moment().utc().format('YYYY-MM-DDTHH:mm:ss.SSS[Z]') }}",
    "etag": "{{ generate_etag(data) }}",
    "cache_key": "{{ generate_cache_key(request.endpoint, request.args) }}",
    "validation_passed": true,
    "resource_id": "{{ resource_id | default(null) }}",
    "resource_version": "{{ resource_version | default(null) }}",
    "relationships": {{ relationships | default({}) | tojson }}
  }
{%- endif -%}
{%- endblock data -%}

{%- block pagination -%}
{%- if pagination -%}
  {
    "page": {{ pagination.page | default(1) }},
    "per_page": {{ pagination.per_page | default(pagination.limit) | default(20) }},
    "total_pages": {{ pagination.pages | default(pagination.total_pages) | default((pagination.total / pagination.per_page) | round(0, 'ceil')) }},
    "total_items": {{ pagination.total | default(pagination.total_count) | default(0) }},
    "has_prev": {{ pagination.has_prev | default((pagination.page > 1)) | lower }},
    "has_next": {{ pagination.has_next | default((pagination.page < pagination.pages)) | lower }},
    "prev_page": {{ pagination.prev_num | default(pagination.prev_page) | default(null) }},
    "next_page": {{ pagination.next_num | default(pagination.next_page) | default(null) }},
    "items_per_page": {{ pagination.per_page | default(pagination.limit) | default(20) }},
    "current_page_items": {{ pagination.current_page_items | default(pagination.items | length) | default(0) }},
    "page_offset": {{ pagination.offset | default((pagination.page - 1) * pagination.per_page) }},
    "first_item_index": {{ pagination.first_item_index | default(pagination.offset + 1) }},
    "last_item_index": {{ pagination.last_item_index | default(pagination.offset + pagination.current_page_items) }},
    "is_first_page": {{ pagination.is_first_page | default((pagination.page == 1)) | lower }},
    "is_last_page": {{ pagination.is_last_page | default((pagination.page == pagination.pages)) | lower }},
    "pagination_info": {
      "sort_by": "{{ pagination.sort_by | default(sort_by) | default(null) }}",
      "sort_order": "{{ pagination.sort_order | default(sort_order) | default('asc') }}",
      "filters": {{ pagination.filters | default(filters) | default({}) | tojson }},
      "search_query": "{{ pagination.search_query | default(search_query) | default(null) }}",
      "page_size_options": {{ pagination.page_size_options | default([10, 20, 50, 100]) | tojson }},
      "max_page_size": {{ pagination.max_page_size | default(500) }}
    },
    "cursor_pagination": {%- if pagination.cursor_pagination -%}
      {
        "cursor": "{{ pagination.cursor_pagination.cursor | default(null) }}",
        "next_cursor": "{{ pagination.cursor_pagination.next_cursor | default(null) }}",
        "prev_cursor": "{{ pagination.cursor_pagination.prev_cursor | default(null) }}",
        "has_more": {{ pagination.cursor_pagination.has_more | default('false') }},
        "cursor_field": "{{ pagination.cursor_pagination.cursor_field | default('id') }}"
      }
    {%- else -%}null{%- endif -%}
  }
{%- else -%}
  null
{%- endif -%}
{%- endblock pagination -%}

{%- block links -%}
{
  "self": "{{ self_link | default(request.url) }}",
  "api_root": "{{ api_root | default(url_for('api.root', _external=True)) }}",
  "documentation": "{{ documentation_link | default(url_for('api.docs', _external=True)) }}",
  "schema": "{{ schema_link | default(url_for('api.schema', resource=resource_type, _external=True)) }}",
  "collection": "{{ collection_link | default(url_for(request.endpoint.replace('.detail', '.list'), _external=True) if '.detail' in request.endpoint else null) }}",
  "health": "{{ health_link | default(url_for('health.check', _external=True)) }}",
  "status": "{{ status_link | default(url_for('api.status', _external=True)) }}",
  "version": "{{ version_link | default(url_for('api.version', _external=True)) }}",
  "navigation": {
    {%- if pagination -%}
    "first": "{{ first_link | default(url_for(request.endpoint, page=1, **request.args.to_dict(flat=False), _external=True) if pagination.page > 1 else null) }}",
    "prev": "{{ prev_link | default(url_for(request.endpoint, page=pagination.prev_num, **request.args.to_dict(flat=False), _external=True) if pagination.has_prev else null) }}",
    "next": "{{ next_link | default(url_for(request.endpoint, page=pagination.next_num, **request.args.to_dict(flat=False), _external=True) if pagination.has_next else null) }}",
    "last": "{{ last_link | default(url_for(request.endpoint, page=pagination.pages, **request.args.to_dict(flat=False), _external=True) if pagination.page < pagination.pages else null) }}"
    {%- else -%}
    "first": null,
    "prev": null,
    "next": null,
    "last": null
    {%- endif -%}
  },
  "related": {
    {%- if resource_type and resource_id -%}
    "edit": "{{ edit_link | default(url_for(request.endpoint.replace('.list', '.update').replace('.detail', '.update'), id=resource_id, _external=True) if resource_id else null) }}",
    "delete": "{{ delete_link | default(url_for(request.endpoint.replace('.list', '.delete').replace('.detail', '.delete'), id=resource_id, _external=True) if resource_id else null) }}",
    "relationships": {{ relationships_links | default({}) | tojson }}
    {%- else -%}
    "create": "{{ create_link | default(url_for(request.endpoint.replace('.list', '.create'), _external=True) if '.list' in request.endpoint else null) }}",
    "bulk_operations": "{{ bulk_operations_link | default(url_for(request.endpoint.replace('.list', '.bulk'), _external=True) if '.list' in request.endpoint else null) }}"
    {%- endif -%}
  },
  "meta": {
    "api_documentation": "{{ api_docs_link | default(url_for('api.swagger_ui', _external=True)) }}",
    "openapi_spec": "{{ openapi_spec_link | default(url_for('api.openapi_json', _external=True)) }}",
    "postman_collection": "{{ postman_collection_link | default(url_for('api.postman_collection', _external=True)) }}",
    "rate_limiting": "{{ rate_limiting_link | default(url_for('api.rate_limits', _external=True)) }}",
    "authentication": "{{ auth_docs_link | default(url_for('api.auth_docs', _external=True)) }}"
  }
}
{%- endblock links -%}

{%- block warnings -%}
{%- set template_warnings = [] -%}
{%- if data and data is mapping and data.deprecated -%}
  {%- set _ = template_warnings.append({
    "code": "DEPRECATED_FIELDS",
    "message": "Some fields in this response are deprecated and will be removed in a future version",
    "deprecated_fields": data.deprecated,
    "removal_version": data.removal_version | default("v2"),
    "documentation": url_for('api.deprecation_guide', _external=True)
  }) -%}
{%- endif -%}
{%- if pagination and pagination.total > 10000 -%}
  {%- set _ = template_warnings.append({
    "code": "LARGE_RESULT_SET",
    "message": "Large result set detected. Consider using additional filters or cursor-based pagination for better performance",
    "total_items": pagination.total,
    "recommendation": "Use cursor-based pagination or apply more specific filters",
    "performance_impact": "moderate"
  }) -%}
{%- endif -%}
{%- if request.args.get('page') and request.args.get('page')|int > 100 -%}
  {%- set _ = template_warnings.append({
    "code": "DEEP_PAGINATION",
    "message": "Deep pagination detected. Performance may be degraded for high page numbers",
    "current_page": request.args.get('page')|int,
    "recommendation": "Use cursor-based pagination for better performance with large datasets",
    "alternative_endpoint": url_for(request.endpoint.replace('.list', '.cursor_list'), _external=True)
  }) -%}
{%- endif -%}
{{ (warnings | default([]) + template_warnings) | tojson }}
{%- endblock warnings -%}

{%- block notifications -%}
{%- set template_notifications = [] -%}
{%- if data and data is mapping and data.items and (data.items | length) == 0 and request.args -%}
  {%- set _ = template_notifications.append({
    "type": "info",
    "code": "NO_RESULTS_WITH_FILTERS",
    "message": "No results found matching the applied filters. Try adjusting your search criteria",
    "suggestions": [
      "Remove some filters to broaden the search",
      "Check spelling of search terms",
      "Use broader date ranges if applicable"
    ],
    "clear_filters_url": url_for(request.endpoint, _external=True)
  }) -%}
{%- endif -%}
{%- if pagination and pagination.page > 1 and pagination.current_page_items == 0 -%}
  {%- set _ = template_notifications.append({
    "type": "warning",
    "code": "EMPTY_PAGE",
    "message": "The requested page contains no items. You may have exceeded the available data",
    "current_page": pagination.page,
    "total_pages": pagination.pages,
    "suggested_page": pagination.pages,
    "last_page_url": url_for(request.endpoint, page=pagination.pages, **request.args.to_dict(flat=False), _external=True)
  }) -%}
{%- endif -%}
{%- if data and data is mapping and data.cache_hit -%}
  {%- set _ = template_notifications.append({
    "type": "info",
    "code": "CACHED_RESPONSE",
    "message": "This response was served from cache for improved performance",
    "cache_age": data.cache_age,
    "cache_expires": data.cache_expires,
    "refresh_url": url_for(request.endpoint, cache_refresh='true', **request.args.to_dict(flat=False), _external=True)
  }) -%}
{%- endif -%}
{{ (notifications | default([]) + template_notifications) | tojson }}
{%- endblock notifications -%}